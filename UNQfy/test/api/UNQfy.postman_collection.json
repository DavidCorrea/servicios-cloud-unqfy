{
	"info": {
		"_postman_id": "64beb08a-28cb-4bd5-bea4-9069a8b711fa",
		"name": "UNQfy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "errors",
			"item": [
				{
					"name": "route not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "07181c4a-0f5a-4e50-9502-5da2a2ac60ec",
								"type": "text/javascript",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"route not found\", function () {",
									"    pm.response.to.have.status(404);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.deep.equal({",
									"        status: 404,",
									"        errorCode: \"RESOURCE_NOT_FOUND\"",
									"    });",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:{{port}}/invalidRoute",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"invalidRoute"
							]
						}
					},
					"response": []
				},
				{
					"name": "send invalid json",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "06e6ef6f-1888-4ccf-8f6a-dc08ba1ebad6",
								"type": "text/javascript",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"invalid json\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.deep.equal({",
									"        status: 400,",
									"        errorCode: \"BAD_REQUEST\"",
									"    });",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Guns n' Roses\",\n  country\": \"USA\"\n}"
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/artists",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"artists"
							]
						}
					},
					"response": []
				},
				{
					"name": "artists/9999 (doesn't exist)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4df8b615-9dc8-4861-926a-4cbb887278e2",
								"type": "text/javascript",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"get inexistent artist\", function () {",
									"    pm.response.to.have.status(404);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.deep.equal({",
									"        status: 404,",
									"        errorCode: \"RESOURCE_NOT_FOUND\"",
									"    });",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/api/artists/9999",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"artists",
								"9999"
							]
						}
					},
					"response": []
				},
				{
					"name": "add album (artist doesn't exist)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b96e282c-5eb4-40d7-826f-f3c645c2f3f2",
								"type": "text/javascript",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"add album to inexistent artist\", function () {",
									"    pm.response.to.have.status(404);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.deep.equal({",
									"        status: 404,",
									"        errorCode: \"RELATED_RESOURCE_NOT_FOUND\"",
									"    });",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Appetite For Destruction\",\n  \"year\": 1987,\n  \"artistId\": 9999\n}"
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/albums",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"albums"
							]
						}
					},
					"response": []
				},
				{
					"name": "add artist (missing required field)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05a9bdea-ca7e-4931-8951-d0441fb53eaf",
								"type": "text/javascript",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"add artist, missing required field\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.deep.equal({",
									"        status: 400,",
									"        errorCode: \"BAD_REQUEST\"",
									"    });",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"country\": \"USA\"\n}"
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/artists",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"artists"
							]
						}
					},
					"response": []
				},
				{
					"name": "albums/9999 (doesn't exist)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a10a17d0-556d-412d-bd72-c016d208ddf8",
								"type": "text/javascript",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"get inexistent album\", function () {",
									"    pm.response.to.have.status(404);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.deep.equal({",
									"        status: 404,",
									"        errorCode: \"RESOURCE_NOT_FOUND\"",
									"    });",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/api/albums/99999",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"albums",
								"99999"
							]
						}
					},
					"response": []
				},
				{
					"name": "playlists/9999 (doesn't exist)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "97f6f3a7-8a8f-4f7c-9c6a-8eae160e76d5",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"get inexistent playlist\", function () {",
									"    pm.response.to.have.status(404);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.deep.equal({",
									"        status: 404,",
									"        errorCode: \"RESOURCE_NOT_FOUND\"",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/api/playlists/99999",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"playlists",
								"99999"
							]
						}
					},
					"response": []
				},
				{
					"name": "tracks/9999/lyrics (doesn't exist)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2f90b384-c6aa-4a39-b275-d3fd3384e422",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"get inexistent track\", function () {",
									"    pm.response.to.have.status(404);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.deep.equal({",
									"        status: 404,",
									"        errorCode: \"RESOURCE_NOT_FOUND\"",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/api/tracks/99999/lyrics",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"tracks",
								"99999",
								"lyrics"
							]
						}
					},
					"response": []
				},
				{
					"name": "add album (missing required field)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5e28c9e1-931c-4a02-91e8-1df9ba73dc8f",
								"type": "text/javascript",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"add album, missing required field\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.deep.equal({",
									"        status: 400,",
									"        errorCode: \"BAD_REQUEST\"",
									"    });",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Appetite For Destruction\",\n  \"year\": 1987\n}"
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/albums",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"albums"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete artist (doesn't exist)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "df160292-55a0-4bd7-a5d6-f55350d691bb",
								"type": "text/javascript",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"delete inexistent artist\", function () {",
									"    pm.response.to.have.status(404);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.deep.equal({",
									"        status: 404,",
									"        errorCode: \"RESOURCE_NOT_FOUND\"",
									"    });",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/artists/9999",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"artists",
								"9999"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete album (doesn't exist)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00d51a5d-0819-4113-aa94-bf7d95a18e3b",
								"type": "text/javascript",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"delete inexistent album\", function () {",
									"    pm.response.to.have.status(404);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.deep.equal({",
									"        status: 404,",
									"        errorCode: \"RESOURCE_NOT_FOUND\"",
									"    });",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/albums/9999",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"albums",
								"9999"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete playlist (doesn't exist)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1826b539-c0a4-4c55-abcb-4494e565afaa",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"delete inexistent playlist\", function () {",
									"    pm.response.to.have.status(404);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.deep.equal({",
									"        status: 404,",
									"        errorCode: \"RESOURCE_NOT_FOUND\"",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/playlists/9999",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"playlists",
								"9999"
							]
						}
					},
					"response": []
				},
				{
					"name": "add playlist from songs (song doesn't exist)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8661a0a4-7e07-46f7-86c0-3ec66de4fec7",
								"exec": [
									"// NOTE: This tests against the objects created by the UNQfy script.",
									"",
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"add album to inexistent artist\", function () {",
									"    pm.response.to.have.status(404);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.deep.equal({",
									"        status: 404,",
									"        errorCode: \"RELATED_RESOURCE_NOT_FOUND\"",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2635a7d9-577d-4a16-8e7d-97ad2a5bb278",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Electronica Mix from Unknown Songs\",\n  \"tracks\": [99999]\n}"
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/playlists",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"playlists"
							]
						}
					},
					"response": []
				},
				{
					"name": "add playlist from songs (missing required field)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "47bf0574-41b7-493f-b1ab-27bf3f3bbaac",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"add playlist with missing required field\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.deep.equal({",
									"        status: 400,",
									"        errorCode: \"BAD_REQUEST\"",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "30ffaf09-4677-4ae7-bb93-32c7d37cc8e4",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Electronica Mix from Unknown Songs\"\n}"
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/playlists",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"playlists"
							]
						}
					},
					"response": []
				},
				{
					"name": "add playlist from genres (missing maxDuration field)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f067f0ba-c5f3-40ec-898d-8c02ba2e775f",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"add playlist with missing required field\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.deep.equal({",
									"        status: 400,",
									"        errorCode: \"BAD_REQUEST\"",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2db13cef-4981-4e3f-9a73-de0d103b7212",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Electronica Mix\",\n  \"genres\": [\"Electronica\"]\n}"
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/playlists",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"playlists"
							]
						}
					},
					"response": []
				},
				{
					"name": "add playlist from genres (missing genres field)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "154a3404-8b79-4763-95b9-114e812dbba7",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"add playlist with missing required field\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.deep.equal({",
									"        status: 400,",
									"        errorCode: \"BAD_REQUEST\"",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "fe875189-17f8-4d05-b4fd-91e6917c5758",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Electronica Mix\",\n  \"maxDuration\": 2500\n}"
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/playlists",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"playlists"
							]
						}
					},
					"response": []
				},
				{
					"name": "add user (missing required field)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4da858e6-dc05-4e67-8f8e-e25ab080b14d",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"add user, missing required field\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.deep.equal({",
									"        status: 400,",
									"        errorCode: \"BAD_REQUEST\"",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "user/9999 (doesn't exist)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bb2a458a-f2bd-420e-9d78-ce099c124c9a",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"get inexistent user\", function () {",
									"    pm.response.to.have.status(404);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.deep.equal({",
									"        status: 404,",
									"        errorCode: \"RESOURCE_NOT_FOUND\"",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/api/users/9999",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"users",
								"9999"
							]
						}
					},
					"response": []
				},
				{
					"name": "edit user (doesn't exist)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "568d1078-79fc-474c-b694-4d0985e19808",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"get inexistent user\", function () {",
									"    pm.response.to.have.status(404);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.deep.equal({",
									"        status: 404,",
									"        errorCode: \"RESOURCE_NOT_FOUND\"",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Jonny Doe\"\n}"
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/users/9999",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"users",
								"9999"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete user (doesn't exist)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80b99ca3-0242-48eb-96c0-432c7868c1ce",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"get inexistent user\", function () {",
									"    pm.response.to.have.status(404);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.deep.equal({",
									"        status: 404,",
									"        errorCode: \"RESOURCE_NOT_FOUND\"",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/api/users/9999",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"users",
								"9999"
							]
						}
					},
					"response": []
				},
				{
					"name": "user reproduction (missing required field)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e1cc4bb5-01ae-49a5-9bd0-2ae1fb381b69",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"add playlist with missing required field\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.deep.equal({",
									"        status: 400,",
									"        errorCode: \"BAD_REQUEST\"",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/users/{{testUserId}}/reproductions",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"users",
								"{{testUserId}}",
								"reproductions"
							]
						}
					},
					"response": []
				},
				{
					"name": "user reproduction (user doesn't exist)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7b67644e-1ab7-40e1-959d-1de49208431d",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"get inexistent user\", function () {",
									"    pm.response.to.have.status(404);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.deep.equal({",
									"        status: 404,",
									"        errorCode: \"RESOURCE_NOT_FOUND\"",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"track\": 8\n}"
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/users/9999/reproductions",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"users",
								"9999",
								"reproductions"
							]
						}
					},
					"response": []
				},
				{
					"name": "user reproduction (track doesn't exist)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "061730df-3a78-4c85-a89a-d507ff5e3cfb",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"get inexistent user\", function () {",
									"    pm.response.to.have.status(404);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.deep.equal({",
									"        status: 404,",
									"        errorCode: \"RELATED_RESOURCE_NOT_FOUND\"",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"track\": 9999\n}"
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/users/{{testUserId}}/reproductions",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"users",
								"{{testUserId}}",
								"reproductions"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "artists",
			"item": [
				{
					"name": "filter artists",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "88741633-56b0-422b-a3eb-99721861983b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f1dfff26-2d91-4d2d-84a7-6ff8b3eb1acc",
								"type": "text/javascript",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"should be empty list\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.deep.equal([]);",
									"",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/api/artists?name=guns",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"artists"
							],
							"query": [
								{
									"key": "name",
									"value": "guns"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "all artists",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "93b77e1e-ecd9-4d51-b3d2-5794ec934504",
								"type": "text/javascript",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"should be empty list\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.deep.equal([]);",
									"",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/api/artists",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"artists"
							]
						}
					},
					"response": []
				},
				{
					"name": "add artist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6466d576-d251-4a77-8ffe-0af7a8f1eae7",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"should add artist\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    var artistId = jsonData.id;",
									"    ",
									"",
									"    pm.expect(jsonData).to.be.deep.equal({",
									"        \"id\": artistId,",
									"        \"name\": \"Guns and Roses\",",
									"        \"albums\": [],",
									"        \"country\": \"United States\",",
									"    });",
									"    pm.environment.set(\"testArtistId\", artistId);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4f37d6b3-3b33-487b-b3c1-2cca35e1abab",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Guns and Roses\",\n  \"country\": \"United States\"\n}"
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/artists",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"artists"
							]
						}
					},
					"response": []
				},
				{
					"name": "add duplicated artist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cc8343ed-6af5-4e34-ba74-4f8c23ddef1f",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"add artist with the same name\", function () {",
									"    pm.response.to.have.status(409);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.deep.equal({",
									"        status: 409,",
									"        errorCode: \"RESOURCE_ALREADY_EXISTS\"        ",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "bfc7223f-2b59-4f74-90ad-e5d9a59d6263",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Guns and Roses\",\n  \"country\": \"United States\"\n}"
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/artists",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"artists"
							]
						}
					},
					"response": []
				},
				{
					"name": "artist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "44ea36e1-92ca-4023-a38f-e5d6f4dcb4c2",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"should get artist\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    ",
									"",
									"    pm.expect(jsonData).to.be.deep.equal({",
									"        \"id\": pm.environment.get(\"testArtistId\"),",
									"        \"name\": \"Guns and Roses\",",
									"        \"albums\": [],",
									"        \"country\": \"United States\",",
									"    });",
									"    ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/api/artists/{{testArtistId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"artists",
								"{{testArtistId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update artist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fcd90e88-f1f5-4745-98f0-0abdbfd8dc69",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"should add artist\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    var artistId = jsonData.id;",
									"    ",
									"",
									"    pm.expect(jsonData).to.be.deep.equal({",
									"        \"id\": artistId,",
									"        \"name\": \"Guns n' Roses\",",
									"        \"albums\": [],",
									"        \"country\": \"USA\",",
									"    });",
									"    pm.environment.set(\"testArtistId\", artistId);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f5aa456f-055a-4e19-a1c0-d6e35fb1250a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Guns n' Roses\",\n  \"country\": \"USA\"\n}"
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/artists/{{testArtistId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"artists",
								"{{testArtistId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "add another artist ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "489ab390-49d5-44ef-bc49-f6b9a6f8dab1",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"should add another artist\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    var artistId = jsonData.id;",
									"    ",
									"",
									"    pm.expect(jsonData).to.be.deep.equal({",
									"        \"id\": artistId,",
									"        \"name\": \"Muse\",",
									"        \"albums\": [],",
									"        \"country\": \"UK\",",
									"    });",
									"    pm.environment.set(\"testArtistId2\", artistId);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "836fc939-81e0-4bf6-a363-007fcde23b32",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Muse\",\n  \"country\": \"UK\"\n}"
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/artists",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"artists"
							]
						}
					},
					"response": []
				},
				{
					"name": "filter artists guns",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "73880977-033e-427f-8112-171d8e653c27",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4eb6f94d-307f-417b-9649-53922ad8d849",
								"type": "text/javascript",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"should get list of one artist\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.deep.equal([",
									"        {",
									"            \"id\": pm.environment.get(\"testArtistId\"),",
									"            \"name\": \"Guns n' Roses\",",
									"            \"albums\": [],",
									"            \"country\": \"USA\",",
									"        }",
									"    ]);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/api/artists?name=guns",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"artists"
							],
							"query": [
								{
									"key": "name",
									"value": "guns"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "filter artists se",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c71b4d2b-c7d6-4a82-b714-3941f963bd8b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5dea6663-8cd5-4ba0-bf88-83da2ee5977a",
								"type": "text/javascript",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"should get two artists\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.deep.equal([",
									"        {",
									"            \"id\": pm.environment.get(\"testArtistId\"),",
									"            \"name\": \"Guns n' Roses\",",
									"            \"albums\": [],",
									"            \"country\": \"USA\",",
									"        },",
									"        {",
									"            \"id\": pm.environment.get(\"testArtistId2\"),",
									"            \"name\": \"Muse\",",
									"            \"albums\": [],",
									"            \"country\": \"UK\",",
									"        }",
									"    ]);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/api/artists?name=se",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"artists"
							],
							"query": [
								{
									"key": "name",
									"value": "se"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "all artists",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "41545fe9-79a3-472d-95f4-12695d87355b",
								"type": "text/javascript",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"should get two artists\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.deep.equal([",
									"        {",
									"            \"id\": pm.environment.get(\"testArtistId\"),",
									"            \"name\": \"Guns n' Roses\",",
									"            \"albums\": [],",
									"            \"country\": \"USA\",",
									"        },",
									"        {",
									"            \"id\": pm.environment.get(\"testArtistId2\"),",
									"            \"name\": \"Muse\",",
									"            \"albums\": [],",
									"            \"country\": \"UK\",",
									"        }",
									"    ]);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/api/artists",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"artists"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete artist Muse",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "766104d3-c3ce-4e40-bd77-db091110a512",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"should delete artist\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/artists/{{testArtistId2}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"artists",
								"{{testArtistId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "all artists",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "78e69c12-3143-4464-bc3d-3ce41290dbb0",
								"type": "text/javascript",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"should get one artist\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.deep.equal([",
									"        {",
									"            \"id\": pm.environment.get(\"testArtistId\"),",
									"            \"name\": \"Guns n' Roses\",",
									"            \"albums\": [],",
									"            \"country\": \"USA\",",
									"        }",
									"    ]);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/api/artists",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"artists"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "albums",
			"item": [
				{
					"name": "all albums",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a9b8743a-07af-484f-a821-e607896caaed",
								"type": "text/javascript",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"empty albums\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.deep.equal([]);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/api/albums",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"albums"
							]
						}
					},
					"response": []
				},
				{
					"name": "filter albums",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "871a34dc-b1c1-4b77-8964-a53b685b995e",
								"type": "text/javascript",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"empty albums\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.deep.equal([]);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/api/albums?name=destruction",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"albums"
							],
							"query": [
								{
									"key": "name",
									"value": "destruction"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "add album",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d90d7b3c-8384-4144-b0fb-9057a3e88e9a",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"add album\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    var albumId = jsonData.id;",
									"    ",
									"    var expectedAlbum = {",
									"        \"id\": albumId,",
									"        \"name\": \"Appetite For Destruction\",",
									"        \"year\": 2000,",
									"        \"tracks\":[]",
									"    };",
									"    ",
									"    pm.expect(jsonData).to.be.deep.equal(expectedAlbum);",
									"    pm.environment.set(\"testAlbumId\", albumId);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b3911adf-b0bc-411d-a4a0-7b4ba4e77d57",
								"exec": [
									"/*",
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"   ",
									"    var jsonData = pm.response.json();",
									"    var artistId = jsonData.artistId;",
									"    ",
									"    pm.response.to.have.jsonBody({",
									"        \"name\": \"Appetite For Destruction\",",
									"        \"year\": 1987,",
									"        \"artistId\": artistId",
									"    });",
									"});",
									"",
									"const echoPostRequest = {",
									"  url: `http://localhost:${port}`,",
									"  method: 'DELETE',",
									"  header: '',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify({ key: 'this is json' })",
									"  }",
									"};",
									"pm.sendRequest(, function (err, response) {",
									"    console.log(response.json());",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Appetite For Destruction\",\n  \"year\": 2000,\n  \"artistId\": {{testArtistId}}\n}"
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/albums",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"albums"
							]
						}
					},
					"response": []
				},
				{
					"name": "add duplicated album",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "945d129a-fd0d-48c4-b635-ecacc2b1fd9f",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"add album with the same name\", function () {",
									"    pm.response.to.have.status(409);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.deep.equal({",
									"        status: 409,",
									"        errorCode: \"RESOURCE_ALREADY_EXISTS\"        ",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e51306d8-0f8d-424c-96b9-a3fc4701644e",
								"exec": [
									"/*",
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"   ",
									"    var jsonData = pm.response.json();",
									"    var artistId = jsonData.artistId;",
									"    ",
									"    pm.response.to.have.jsonBody({",
									"        \"name\": \"Appetite For Destruction\",",
									"        \"year\": 1987,",
									"        \"artistId\": artistId",
									"    });",
									"});",
									"",
									"const echoPostRequest = {",
									"  url: `http://localhost:${port}`,",
									"  method: 'DELETE',",
									"  header: '',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify({ key: 'this is json' })",
									"  }",
									"};",
									"pm.sendRequest(, function (err, response) {",
									"    console.log(response.json());",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Appetite For Destruction\",\n  \"year\": 2000,\n  \"artistId\": {{testArtistId}}\n}"
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/albums",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"albums"
							]
						}
					},
					"response": []
				},
				{
					"name": "get album",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc443425-4be1-4df2-b387-9bc9773a7aa4",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"get album\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    ",
									"",
									"    pm.expect(jsonData).to.be.deep.equal({",
									"        \"id\": pm.environment.get(\"testAlbumId\"),",
									"        \"name\": \"Appetite For Destruction\",",
									"        \"tracks\": [],",
									"        \"year\": 2000,",
									"    });",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/api/albums/{{testAlbumId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"albums",
								"{{testAlbumId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update album (partial)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "840951c0-d51c-4685-a62c-f821d1955f03",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"update album\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    ",
									"",
									"    pm.expect(jsonData).to.be.deep.equal({",
									"        \"id\": pm.environment.get(\"testAlbumId\"),",
									"        \"name\": \"Appetite For Destruction\",",
									"        \"tracks\": [],",
									"        \"year\": 1987,",
									"    });",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"year\": 1987\n}"
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/albums/{{testAlbumId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"albums",
								"{{testAlbumId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "artist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a80dd477-fe3b-4651-8f39-26c5ebdd9aeb",
								"type": "text/javascript",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"artist should have 1 album\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    ",
									"",
									"    pm.expect(jsonData).to.be.deep.equal({",
									"        \"id\": pm.environment.get(\"testArtistId\"),",
									"        \"name\": \"Guns n' Roses\",",
									"        \"albums\": [",
									"             {",
									"                \"id\": pm.environment.get(\"testAlbumId\"),",
									"                \"name\": \"Appetite For Destruction\",",
									"                \"year\": 1987,",
									"                \"tracks\":[]",
									"            }",
									"        ],",
									"        \"country\": \"USA\",",
									"    });",
									"    ",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/api/artists/{{testArtistId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"artists",
								"{{testArtistId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "add another album",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e7b05eef-a3f2-4ff8-9606-a9d01197222b",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"add album\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    var albumId = jsonData.id;",
									"    ",
									"    var expectedAlbum = {",
									"        \"id\": albumId,",
									"        \"name\": \"Use Your Illusion 1\",",
									"        \"year\": 1992,",
									"        \"tracks\":[]",
									"    };",
									"    ",
									"    pm.expect(jsonData).to.be.deep.equal(expectedAlbum);",
									"    pm.environment.set(\"testAlbumId2\", albumId);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "76982fce-dc51-4887-b711-bde8aa391eea",
								"exec": [
									"/*",
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"   ",
									"    var jsonData = pm.response.json();",
									"    var artistId = jsonData.artistId;",
									"    ",
									"    pm.response.to.have.jsonBody({",
									"        \"name\": \"Appetite For Destruction\",",
									"        \"year\": 1987,",
									"        \"artistId\": artistId",
									"    });",
									"});",
									"",
									"const echoPostRequest = {",
									"  url: `http://localhost:${port}`,",
									"  method: 'DELETE',",
									"  header: '',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify({ key: 'this is json' })",
									"  }",
									"};",
									"pm.sendRequest(, function (err, response) {",
									"    console.log(response.json());",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Use Your Illusion 1\",\n  \"year\": 1992,\n  \"artistId\": {{testArtistId}}\n}"
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/albums",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"albums"
							]
						}
					},
					"response": []
				},
				{
					"name": "filter albums illusion",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fccf09eb-15c7-4eda-bc56-669a9211553f",
								"type": "text/javascript",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"should be one album\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    ",
									"",
									"    pm.expect(jsonData).to.be.deep.equal([",
									"        {",
									"        \"id\": pm.environment.get(\"testAlbumId2\"),",
									"        \"name\": \"Use Your Illusion 1\",",
									"        \"year\": 1992,",
									"        \"tracks\": [],",
									"    }]);",
									"    ",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/api/albums?name=illusion",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"albums"
							],
							"query": [
								{
									"key": "name",
									"value": "illusion"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "all albums",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0a18e775-efd0-4c45-a059-c5fa6ec9abac",
								"type": "text/javascript",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"should be two album\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.deep.equal([",
									"       {",
									"            \"id\": pm.environment.get(\"testAlbumId\"),",
									"            \"name\": \"Appetite For Destruction\",",
									"            \"year\": 1987,",
									"            \"tracks\":[]",
									"        },",
									"        {",
									"            \"id\": pm.environment.get(\"testAlbumId2\"),",
									"            \"name\": \"Use Your Illusion 1\",",
									"            \"year\": 1992,",
									"            \"tracks\": [],",
									"        }",
									"    ]);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/api/albums",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"albums"
							]
						}
					},
					"response": []
				},
				{
					"name": "artist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dcf2a931-f5c1-44d3-bc86-def23e386670",
								"type": "text/javascript",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"artist should have 2 albums\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    ",
									"",
									"    pm.expect(jsonData).to.be.deep.equal({",
									"        \"id\": pm.environment.get(\"testArtistId\"),",
									"        \"name\": \"Guns n' Roses\",",
									"        \"albums\": [",
									"             {",
									"                \"id\": pm.environment.get(\"testAlbumId\"),",
									"                \"name\": \"Appetite For Destruction\",",
									"                \"year\": 1987,",
									"                \"tracks\":[]",
									"            },",
									"            {",
									"                \"id\": pm.environment.get(\"testAlbumId2\"),",
									"                \"name\": \"Use Your Illusion 1\",",
									"                \"year\": 1992,",
									"                \"tracks\": [],",
									"            }",
									"        ],",
									"        \"country\": \"USA\",",
									"    });",
									"    ",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/api/artists/{{testArtistId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"artists",
								"{{testArtistId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete album",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e427484e-83ee-499e-8684-124d47c5c3cd",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"delete album\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/albums/{{testAlbumId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"albums",
								"{{testAlbumId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "artist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9ed2e8cf-7ca6-4aa1-a999-86d71f9ab3fe",
								"type": "text/javascript",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"artist should have one album\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    ",
									"",
									"    pm.expect(jsonData).to.be.deep.equal({",
									"        \"id\": pm.environment.get(\"testArtistId\"),",
									"        \"name\": \"Guns n' Roses\",",
									"        \"albums\": [",
									"            {",
									"                \"id\": pm.environment.get(\"testAlbumId2\"),",
									"                \"name\": \"Use Your Illusion 1\",",
									"                \"year\": 1992,",
									"                \"tracks\": [],",
									"            }",
									"        ],",
									"        \"country\": \"USA\",",
									"    });",
									"    ",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/api/artists/{{testArtistId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"artists",
								"{{testArtistId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "all albums",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd843f6e-0279-43a0-9c06-d1e48dbfe848",
								"type": "text/javascript",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"should be one album\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.deep.equal([",
									"        {",
									"            \"id\": pm.environment.get(\"testAlbumId2\"),",
									"            \"name\": \"Use Your Illusion 1\",",
									"            \"year\": 1992,",
									"            \"tracks\": [],",
									"        }",
									"    ]);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/api/albums",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"albums"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "lyrics",
			"item": [
				{
					"name": "lyrics",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "31534629-6550-490b-bd74-4a2ed0b09937",
								"exec": [
									"// NOTE: This tests against the objects created by the UNQfy script.",
									"",
									"// Following commands are required for this test:",
									"// > trackLyrics trackTitle 'Strobe'",
									"",
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"should return track name with its lyrics\", function () {",
									"   pm.response.to.have.status(200);",
									"   pm.response.to.have.jsonBody();",
									"",
									"   var jsonData = pm.response.json();",
									"   pm.expect(Object.keys(jsonData)).to.be.deep.equal(['name', 'lyrics']);",
									"   pm.expect(jsonData.name).not.to.be.equal(null);",
									"   pm.expect(jsonData.lyrics).not.to.be.equal(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:{{port}}/api/tracks/{{testTrackId}}/lyrics",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"tracks",
								"{{testTrackId}}",
								"lyrics"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "playlists",
			"item": [
				{
					"name": "add playlist from genres",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "be6d5a2b-f521-47a5-b328-5a5a3b8c50b3",
								"exec": [
									"// NOTE: This tests against the objects created by the UNQfy script.",
									"",
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"should create playlist\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    var playlistId = jsonData.id;",
									"",
									"    pm.expect(jsonData).to.deep.include({",
									"        \"id\": playlistId,",
									"        \"name\": \"Electronica Mix\",",
									"        \"duration\": 1150",
									"    });",
									"",
									"    pm.expect(jsonData.tracks).to.deep.include.members([",
									"        {",
									"            \"id\": 8,",
									"            \"title\": \"Strobe\",",
									"            \"duration\": 311,",
									"            \"genres\": [",
									"                \"Electronica\",",
									"                \"House\",",
									"                \"Trance\"",
									"            ],",
									"            \"lyrics\": \"\"",
									"        },",
									"        {",
									"            \"id\": 9,",
									"            \"title\": \"Imaginary Friends\",",
									"            \"duration\": 103,",
									"            \"genres\": [",
									"                \"Electronica\",",
									"                \"House\",",
									"                \"Trance\"",
									"            ],",
									"            \"lyrics\": \"\"",
									"        }, ",
									"        {",
									"            \"id\": 10,",
									"            \"title\": \"Strobe (PEEKABOO Remix)\",",
									"            \"duration\": 244,",
									"            \"genres\": [",
									"                \"Electronica\",",
									"                \"House\",",
									"                \"Trance\"",
									"            ],",
									"            \"lyrics\": \"\"",
									"        }, ",
									"        {",
									"            \"id\": 11,",
									"            \"title\": \"Imaginary Friends (Morgan Page Remix)\",",
									"            \"duration\": 492,",
									"            \"genres\": [",
									"                \"Electronica\",",
									"                \"House\",",
									"                \"Trance\"",
									"            ],",
									"            \"lyrics\": \"\"",
									"        }",
									"    ]);",
									"",
									"    pm.environment.set(\"testPlaylistId\", playlistId);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b337c20d-cad4-48b9-b61f-982b90f140e6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Electronica Mix\",\n  \"maxDuration\": 2500,\n  \"genres\": [\"Electronica\"]\n}"
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/playlists",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"playlists"
							]
						}
					},
					"response": []
				},
				{
					"name": "add duplicate playlist from genres",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "09b87cec-c1ca-400c-bad8-0727fbfafa0e",
								"exec": [
									"// NOTE: This tests against the objects created by the UNQfy script.",
									"",
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"add playlist with the same name\", function () {",
									"    pm.response.to.have.status(409);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.deep.equal({",
									"        status: 409,",
									"        errorCode: \"RESOURCE_ALREADY_EXISTS\"        ",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "57419ea0-8b00-4023-9962-c4a6df12e60d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Electronica Mix\",\n  \"maxDuration\": 2000,\n  \"genres\": [\"Electronica\"]\n}"
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/playlists",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"playlists"
							]
						}
					},
					"response": []
				},
				{
					"name": "add playlist from songs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1f9fc247-e95d-46f3-8dca-93977eec76bb",
								"exec": [
									"// NOTE: This tests against the objects created by the UNQfy script.",
									"",
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"should create playlist\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    var playlistId = jsonData.id;",
									"",
									"    pm.expect(jsonData).to.deep.include({",
									"        \"id\": playlistId,",
									"        \"name\": \"Electronica Mix from Songs\",",
									"        \"duration\": 658",
									"    });",
									"",
									"    pm.expect(jsonData.tracks).to.deep.include.members([",
									"        {",
									"            \"id\": 8,",
									"            \"title\": \"Strobe\",",
									"            \"duration\": 311,",
									"            \"genres\": [",
									"                \"Electronica\",",
									"                \"House\",",
									"                \"Trance\"",
									"            ],",
									"            \"lyrics\": \"\"",
									"        },",
									"        {",
									"            \"id\": 9,",
									"            \"title\": \"Imaginary Friends\",",
									"            \"duration\": 103,",
									"            \"genres\": [",
									"                \"Electronica\",",
									"                \"House\",",
									"                \"Trance\"",
									"            ],",
									"            \"lyrics\": \"\"",
									"        },",
									"        {",
									"            \"id\": 10,",
									"            \"title\": \"Strobe (PEEKABOO Remix)\",",
									"            \"duration\": 244,",
									"            \"genres\": [",
									"                \"Electronica\",",
									"                \"House\",",
									"                \"Trance\"",
									"            ],",
									"            \"lyrics\": \"\"",
									"        }",
									"    ]);",
									"",
									"    pm.environment.set(\"testPlaylistFromSongId\", playlistId);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8eed8d9a-93d5-423b-9127-3dc92c8aa958",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Electronica Mix from Songs\",\n  \"tracks\": [8, 9, 10]\n}"
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/playlists",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"playlists"
							]
						}
					},
					"response": []
				},
				{
					"name": "add duplicate playlist from songs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "34547358-f4a5-4f89-9294-0fd928fa218c",
								"exec": [
									"// NOTE: This tests against the objects created by the UNQfy script.",
									"",
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"add playlist with the same name\", function () {",
									"    pm.response.to.have.status(409);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.deep.equal({",
									"        status: 409,",
									"        errorCode: \"RESOURCE_ALREADY_EXISTS\"        ",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "76c16668-a250-4db4-9b84-2df06d4ae37c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Electronica Mix from Songs\",\n  \"tracks\": [9, 10]\n}"
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/playlists",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"playlists"
							]
						}
					},
					"response": []
				},
				{
					"name": "get playlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f0d35de8-ee0a-40b3-8c58-af4a164acab2",
								"exec": [
									"// NOTE: This tests against the objects created by the UNQfy script.",
									"",
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"should get Playlist\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData).to.deep.include({",
									"        \"id\": Number(pm.environment.get(\"testPlaylistId\")),",
									"       \"name\": \"Electronica Mix\",",
									"       \"duration\": 1150",
									"    });",
									"",
									"    pm.expect(jsonData.tracks).to.deep.include.members([",
									"        {",
									"            \"id\": 10,",
									"            \"title\": \"Strobe (PEEKABOO Remix)\",",
									"            \"duration\": 244,",
									"            \"genres\": [",
									"                \"Electronica\",",
									"                \"House\",",
									"                \"Trance\"",
									"            ],",
									"            \"lyrics\": \"\"",
									"        },",
									"        {",
									"            \"id\": 9,",
									"            \"title\": \"Imaginary Friends\",",
									"            \"duration\": 103,",
									"            \"genres\": [",
									"                \"Electronica\",",
									"                \"House\",",
									"                \"Trance\"",
									"            ],",
									"            \"lyrics\": \"\"",
									"        },",
									"        {",
									"            \"id\": 8,",
									"            \"title\": \"Strobe\",",
									"            \"duration\": 311,",
									"            \"genres\": [",
									"                \"Electronica\",",
									"                \"House\",",
									"                \"Trance\"",
									"            ],",
									"            \"lyrics\": \"\"",
									"        },",
									"        {",
									"            \"id\": 11,",
									"            \"title\": \"Imaginary Friends (Morgan Page Remix)\",",
									"            \"duration\": 492,",
									"            \"genres\": [",
									"                \"Electronica\",",
									"                \"House\",",
									"                \"Trance\"",
									"            ],",
									"            \"lyrics\": \"\"",
									"        }",
									"    ]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/api/playlists/{{testPlaylistId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"playlists",
								"{{testPlaylistId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get playlists",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0ebc7a2f-8419-4e9b-9c2b-04d0ba2d6853",
								"exec": [
									"// NOTE: This tests against the objects created by the UNQfy script.",
									"",
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"should get Playlist\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData).to.deep.include(",
									"        { ",
									"            id: Number(pm.environment.get(\"testPlaylistFromSongId\")),",
									"            name: \"Electronica Mix from Songs\",",
									"            tracks: [",
									"                {",
									"                    \"id\": 8,",
									"                    \"title\": \"Strobe\",",
									"                    \"duration\": 311,",
									"                    \"genres\": [",
									"                        \"Electronica\",",
									"                        \"House\",",
									"                        \"Trance\"",
									"                    ],",
									"                    \"lyrics\": \"\"",
									"                },",
									"                {",
									"                    \"id\": 9,",
									"                    \"title\": \"Imaginary Friends\",",
									"                    \"duration\": 103,",
									"                    \"genres\": [",
									"                        \"Electronica\",",
									"                        \"House\",",
									"                        \"Trance\"",
									"                    ],",
									"                    \"lyrics\": \"\"",
									"                },",
									"                {",
									"                    \"id\": 10,",
									"                    \"title\": \"Strobe (PEEKABOO Remix)\",",
									"                    \"duration\": 244,",
									"                    \"genres\": [",
									"                        \"Electronica\",",
									"                        \"House\",",
									"                        \"Trance\"",
									"                    ],",
									"                    \"lyrics\": \"\"",
									"                }",
									"            ],",
									"            duration: 658",
									"        }",
									"    );",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/api/playlists?name=mix&durationLT=2000&durationGT=500",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"playlists"
							],
							"query": [
								{
									"key": "name",
									"value": "mix"
								},
								{
									"key": "durationLT",
									"value": "2000"
								},
								{
									"key": "durationGT",
									"value": "500"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "delete playlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e86ececa-d950-46a4-93ef-415e2e0ef58a",
								"exec": [
									"// NOTE: This tests against the objects created by the UNQfy script.",
									"",
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"should delete playlist\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/playlists/{{testPlaylistId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"playlists",
								"{{testPlaylistId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "users",
			"item": [
				{
					"name": "add user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "12135eec-982d-4cc9-86cb-a58c47fae0e9",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"should add user\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    var userId = jsonData.id;",
									"",
									"    pm.expect(jsonData).to.be.deep.equal({",
									"        \"id\": userId,",
									"        \"name\": \"John Doe\",",
									"        \"reproductions\": []",
									"    });",
									"",
									"    pm.environment.set(\"testUserId\", userId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"John Doe\"\n}"
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "add user (name already taken)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d7fbcabc-ba72-43b7-8ef4-6e692840834d",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"add artist with the same name\", function () {",
									"    pm.response.to.have.status(409);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.deep.equal({",
									"        status: 409,",
									"        errorCode: \"RESOURCE_ALREADY_EXISTS\"        ",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"John Doe\"\n}"
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2df04889-95e3-4316-bd47-2d4a9062926a",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"should get user\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData).to.be.deep.equal({",
									"        \"id\": pm.environment.get(\"testUserId\"),",
									"        \"name\": \"John Doe\",",
									"        \"reproductions\": []",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/api/users/{{testUserId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"users",
								"{{testUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b72a9843-4b26-4937-9d5b-391d756b7962",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"should get user\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData).to.be.deep.equal({",
									"        \"id\": pm.environment.get(\"testUserId\"),",
									"        \"name\": \"Jonny Doe\",",
									"        \"reproductions\": []",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Jonny Doe\"\n}"
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/users/{{testUserId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"users",
								"{{testUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a5544313-5428-4739-a630-3d43120e28cd",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"should get user\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData).to.be.deep.equal({",
									"        \"id\": pm.environment.get(\"testUserId\"),",
									"        \"name\": \"Jonny Doe\",",
									"        \"reproductions\": []",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/api/users/{{testUserId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"users",
								"{{testUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "add another user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "82edece1-6382-42a2-a552-7563cb62dd30",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"should add another user\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    var userId = jsonData.id;",
									"",
									"    pm.expect(jsonData).to.be.deep.equal({",
									"        \"id\": userId,",
									"        \"name\": \"Sarah Smith\",",
									"        \"reproductions\": []",
									"    });",
									"",
									"    pm.environment.set(\"testUserId2\", userId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Sarah Smith\"\n}"
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete another user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8f94e555-a5e5-48e4-9b3f-11d69ef8ec32",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"delete user\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/api/users/{{testUserId2}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"users",
								"{{testUserId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "another user (not found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "588a0ce3-57f4-4349-addd-bd231ce934c2",
								"exec": [
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"should not find another user\", function () {",
									"    pm.response.to.have.status(404);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.deep.equal({",
									"        status: 404,",
									"        errorCode: \"RESOURCE_NOT_FOUND\"",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/api/users/{{testUserId2}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"users",
								"{{testUserId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "user reproduction",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd4a2a6d-4d85-4f4f-97f5-c1bc899d5ee3",
								"exec": [
									"// NOTE: This tests against the objects created by the UNQfy script.",
									"",
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"should add user\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"track\": 8\n}"
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/users/{{testUserId}}/reproductions",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"users",
								"{{testUserId}}",
								"reproductions"
							]
						}
					},
					"response": []
				},
				{
					"name": "user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1806e3dc-c9d1-4403-bad0-a13d91c1a3a1",
								"exec": [
									"// NOTE: This tests against the objects created by the UNQfy script.",
									"",
									"const chai = require('chai');",
									"chai.config.truncateThreshold = 0;",
									"",
									"pm.test(\"should get updated user\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData).to.be.deep.equal({",
									"        \"id\": pm.environment.get(\"testUserId\"),",
									"        \"name\": \"Jonny Doe\",",
									"        \"reproductions\": [",
									"            {",
									"                \"id\": 4,",
									"                \"track\": {",
									"                    \"id\": 8,",
									"                    \"title\": \"Strobe\",",
									"                    \"duration\": 311,",
									"                    \"genres\": [",
									"                        \"Electronica\",",
									"                        \"House\",",
									"                        \"Trance\"",
									"                    ],",
									"                    \"lyrics\": \"\"",
									"                },",
									"                \"timestamp\": \"2020-11-02T06:01:39.036Z\" // Falla por el tiempo inexacto. (Capaz se podria devolver horas)",
									"            },",
									"        ]",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/api/users/{{testUserId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"users",
								"{{testUserId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}